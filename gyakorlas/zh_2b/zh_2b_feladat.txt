B csoport
Általános tudnivalók
Ebben az ismertetésben az osztályok, valamint a minimálisan szükséges metódusok leírásai fognak szerepelni. A feladatmegoldás során fontos betartani az elnevezésekre és típusokra vonatkozó megszorításokat, illetve a szövegek formázási szabályait.

Segédfüggvények létrehozhatóak, a feladatban nem megkötött adattagok és elnevezéseik is a feladat megoldójára vannak bízva. Törekedjünk arra, hogy az osztályok belsõ reprezentációját a lehetõ legjobban védjük, tehát csak akkor engedjünk, és csak olyan hozzáférést, amelyre a feladat felszólít, vagy amit azt osztályt használó kódrészlet megkíván!

A beadott megoldásodnak mûködnie kell a mellékelt tesztprogramokkal, de ez nem elégséges feltétele az elfogadásnak. A megírt forráskód legyen kellõen általános és újrafelhasználható!

Használható segédanyagok: Java dokumentáció, legfeljebb egy üres lap és toll. Ha bármilyen kérdés, észrevétel felmerül, azt a felügyelõknek kell jelezni, NEM a diáktársaknak!

Figyelem! Az a metódus, mely fordítási hibát tartalmaz, automatikusan nulla pontot ér!

Tesztelés
Az egyes részfeladatokhoz tartoznak külön tesztesetek, amelyeket a feladatok végén jelöltük meg. Ezek önállóan is fordítható és futtatható .java állományok a mellékelt .jar segítségével. Például Windows alatt az elsõ feladathoz tartozó tesztesetek így fordíthatóak és futtathatóak:

> javac -cp .;WeightLifter-tests.jar tests/Part1.java
> java -cp .;WeightLifter-tests.jar tests/Part1
Ugyanezeket a teszteseteket használja a komplett feladathoz tartozó tesztelést végzõ Test osztály is. Ezt Windows alatt így lehet futtatni:

> java -cp .;WeightLifter-tests.jar Test
Linux alatt mindent ugyanúgy lehet fordítani és futtatni, csak a -cp paraméterében a pontosvesszõt kell kettõspontra cserélni.

A feladat összefoglaló leírása
A feladatban súlyemelõk közötti versenyt fogunk szimulálni.

A programhoz tartozik egységtesztelõ, benne egy weightlifters.txt mintafájl, amely az egyes osztályok funkcionalitását teszteli.

A feladat részletes ismertetése
1. rész (6 + 1 pont)
weightlifting.WeightLifter osztály:

Az osztály egy súlyemelõt reprezentál.

Az osztálynak két rejtett adattagja van: egy szöveges típusú name, amely a súlyemelõ nevét tárolja és egy egész szám típusú weight, ami azt tárolja, hogy mekkora az a maximális súly, amit a súlyemelõ fel tud emelni.

Az osztálynak legyen egy rejtett konstruktora, amely paraméterben megkapja a nevet és a súlyt, és beállítja a megfelelõ adattagokat.

Legyen egy statikus make metódus, amely szintén egy nevet és egy súlyt kap. A metódusnak ellenõriznie kell a paramétereket, és amennyiben azok megfelelõek, akkor hozza létre, és adja vissza a paramétereknek megfelelõ WeightLifter objektumot. Ha a paraméterek nem jók, akkor a metódus null-t adjon vissza. A nevet tartalmazó paraméter akkor megfelelõ, ha csak betûkbõl vagy szóközbõl áll és legalább 2 karakter hosszú (azt, hogy ezek a karakterek milyen eloszlásban szerepelnek, nem kell vizsgálni). A súlyt tartalmazó paraméter pedig akkor helyes, ha az értéke pozitív, de legfeljebb 300. Segítség: használhatod a Character osztály isLetter metódusát.

Legyen egy paraméter nélküli getWeight, ami visszaadja a súly értékét.

Az osztály tartalmazzon egy strongerThan metódust, ami eldönti, hogy az aktuális súlyemelõ erõsebb-e (nagyobb súlyt tud-e felemelni), mint a paraméterben kapott súlyemelõ.

Az osztályban legyen egy paraméter nélküli show metódus, amely visszaadja az objektum szöveges reprezentációját. A formátum legye a következõ: név - súly-jobbra-igazítva kg (ha a súly egyszámjegyû, akkor kettõ, ha kétszámjegyû, akkor egy extra szóközt kell beszúrni a szám elé).

Az osztály tartalmazzon egy strongestWeightLifter nevû osztályszintû adattagot, ami a legerõsebb súlyemelõ referenciáját tartalmazza, amit valaha létrehoztak (ha több ilyen van, akkor ezek közül az elsõt). Ha még nem hoztak létre WeightLifter objektumot, akkor az adattag értéke legyen null. Figyelj rá, hogy a konstruktor mindig aktualizálja ezt az objektumot, amikor az összes eddiginél erõsebb súlyemelõt hoz létre.

Legyen egy osztályszintû getStrongestWeightLifter metódus, ami visszaadja az elõbbi WeightLifter objektumot.

Tesztelõ: tests.Part1

2. rész (7 + 2 pont)
weightlifting.Championship osztály:

Az osztály egy egyszerûsített súlyemelõ bajnokságot reprezentál.

Az osztály egy rejtett láncolt lista típusú adattagban tartsa nyilván, hogy kik indulnak a bajnokságon (WeightLifter típusú objektumok).

Az osztálynak egy publikus konstruktora legyen, ami egy fájlnevet kap paraméterként, amely súlyemelõket tartalmaz. A metódus dolgozza fel a fájlt, szûrje ki belõle a hibás adatokat, majd töltse fel a súlyemelõket a láncolt listába. Ha a fájl nem létezik, vagy nem olvasható, akkor a súlyemelõk listája legyen üres, a konstruktor pedig ne engedje ki a keletkezõ kivételt. Az inputfájl minden sora egy súlyemelõt tartalmaz név:súly formában. Ha a sor nem ilyen szerkezetû, vagy a súly nem konvertálható számmá, vagy a megadott adatokból a WeightLifter objektum nem hozható létre, akkor a sort figyelmen kívül kell hagyni és a feldolgozást a következõ sorral kell folytatni.

Azt, hogy egy szöveg egy egész számot tartalmaz kétféleképpen is ellenõrizhetjük.

Elkapjuk az Integer.parseInt() által sikertelen számmá konvertáláskor dobott java.lang.NumberFormatException kivételt.

Megvizsgáljuk a szöveget, hogy minden karaktere számjegy-e vagy sem a Character.isDigit() metódussal.

Legyen egy numberOfWeightLifters metódus, amely visszaadja a bajnokságon még versenyben lévõ súlyemelõk számát. Kezdetben az összes súlyemelõ versenyben van.

Legyen egy paraméter nélküli show metódus, ami szöveges típusban visszaadja a még játékban lévõ versenyzõket. A szöveg összeállításakor a versenyzõk olyan sorrendben szerepeljenek, amilyen sorrendben a konstruktor beolvasta õket, és olyan formában, ahogy a WeightLifter show metódusa elõállítja. Figyeljünk rá, hogy az utolsó versenyzõ után már ne legyen sortörés!

Tesztelõ: tests.Part2

3. rész (6 + 1 pont)
A weightlifting.Championship osztályba vegyük fel az alábbi publikus metódusokat:

strongerThan: a metódus egy WeightLifter típusú objektumot vár, és ilyen objektumok láncolt listáját adja vissza. A metódus gyûjtse össze azokat a versenyzõket, akik erõsebbek, mint a paraméterben kapott súlyemelõ. A súlyemelõk a visszaadott listában olyan sorrendben szerepeljenek, ahogy a konstruktor beolvasta õket.

average: a metódus egy valós számot (double) adjon vissza, azt, hogy a súlyemelõk átlagosan mekkora súlyt képesek felemelni. Ha nincsenek súlyemelõk, akkor a metódus adjon vissza -1-et.

Figyelem: ha két egész számot osztunk egymással, akkor az eredmény mindig egész lesz (lefelé kerekít).

Tesztelõ: tests.Part3

4. rész (6 + 1 pont)
A weightlifting.Championship osztályba vegyük fel az alábbi publikus metódusokat:

round: a metódusnak nincsen paramétere, és a verseny egy körét szimulálja. A versenyben minden körben kiesik a leggyengébb súlyemelõ. Ha a leggyengébb játékossal azonos erõsségû is van, akkor az esik ki, akit a konstruktor korábban olvasott be. A kiesõ súlyemelõt el kell távolítani a listából, és ez a súlyemelõ lesz a metódus visszatérési értéke is. Ha a kör elején egyetlen súlyemelõ sem volt játékban, akkor a metódus null-t adjon vissza.

championship: a metódusnak nincs paramétere és egy bajnokságot szimulál. A bajnokságban annyi körbõl áll, ahány súlyemelõ van. A metódus egy súlyemelõket tartalmazó láncolt listába gyûjtse össze, hogy a versenyzõk az egyes körökben milyen sorrendben estek ki. Ez a lista lesz a metódus visszatérési értéke.

Tesztelõ: tests.Part4

Pontozás (elmélet + gyakorlat)
0 -- 20: elégtelen (1)
21 -- 25: elégséges (2)
26 -- 30: közepes (3)
31 -- 35: jó (4)
36 -- 40: jeles (5)