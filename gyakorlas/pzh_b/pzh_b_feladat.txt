B csoport
Általános tudnivalók
Ebben az ismertetésben az osztályok, valamint a minimálisan szükséges metódusok leírásai fognak szerepelni. A feladatmegoldás során fontos betartani az elnevezésekre és típusokra vonatkozó megszorításokat, illetve a szövegek formázási szabályait. Segédfüggvények is létrehozhatók, a feladatban nem megkötött adattagok és elnevezéseik is a feladat megoldójára vannak bízva. Törekedjünk arra, hogy az osztályok belsõ reprezentációját a lehetõ legjobban védjük, tehát csak akkor engedjünk meg, és csak olyan hozzáférést, amelyre a feladat felszólít, vagy amit az osztályt használó kódrészlet megkíván!

A beadott megoldásnak mûködnie kell a mellékelt tesztprogrammal, de ez nem elégséges feltétele az elfogadásnak. Törekedjünk arra, hogy a megírt forráskód kellõen általános és újrafelhasználható legyen!

Használható segédanyagok: Java dokumentáció, legfeljebb egy üres lap és toll. Ha bármilyen kérdés, észrevétel felmerül, azt a felügyelõknek kell jelezni, NEM a diáktársaknak!

Figyelem! Az a metódus, amely fordítási hibát tartalmaz, automatikusan nulla pontot ér!

Tesztelés
Az egyes részfeladatokhoz tartoznak külön tesztesetek, amelyeket a feladatok végén jelöltük meg. Ezek önállóan is fordítható és futtatható .java állományok a mellékelt .jar segítségével. Például Windows alatt az elsõ feladathoz tartozó tesztesetek így fordíthatóak és futtathatóak:

> javac -cp .;Raffle-tests.jar tests/Part1.java
> java -cp .;Raffle-tests.jar tests/Part1
Ugyanezeket a teszteseteket használja a komplett feladathoz tartozó tesztelést végzõ Test osztály is. Ezt Windows alatt így lehet futtatni:

> java -cp .;Raffle-tests.jar Test
Linux alatt mindent ugyanúgy lehet fordítani és futtatni, csak a -cp paraméterében a pontosvesszõt kell kettõspontra cserélni.

A feladat összefoglaló leírása
A feladat egy tombolát szimulál, amelyben utazásokat lehet nyerni a világ különbözõ városaiba.

A programhoz tartozik egységtesztelõ, amely az egyes osztályok funkcionalitását teszteli.

A feladat részletes ismertetése
1. rész (6 + 1 pont)
raffle.Destination osztály:

Az osztály egy úticélt reprezentál.

Az osztálynak három rejtett adattagja van: egy szöveges típusú city, amely a várost, egy szöveges típusú date, amely az utazás dátumát és egy egész típusú price, amely a nyeremény értékét tárolja.

Az osztálynak legyen egy rejtett konstruktora, amely paraméterként megkapja a várost, a dátumot és a nyeremény értékét, és beállítja a megfelelõ adattagokat.

Az osztály rendelkezik továbbá két rejtett, konstans, osztályszintû adattaggal is. Az egész típusú MAX_PRICE a nyeremények maximális értékét tárolja (ez az érték 7500). A Destination típusú DESTINATION_OF_THE_YEAR az év úticélját tárolja, az úticél New York, az utazás dátuma 2017/12/31, a nyeremény értéke pedig megegyezik a nyeremények maximális értékével.

Definiáljunk egy osztályszintû make nevû metódust is. A make metódus szintén a várost, a dátumot és a nyeremény értékét kapja meg paraméterként. A metódus elõször ellenõrzi, hogy a paraméterek megfelelõek. Amennyiben igen, akkor létrehozza és visszaadja a paramétereknek megfelelõ Destination típusú objektumot. Ha a paraméterek nem megfelelõek, akkor a metódus null-t adjon vissza. A várost tartalmazó paraméter akkor megfelelõ, ha csak betûkbõl vagy szóközbõl áll és legalább 2 karakter hosszú (azt, hogy ezek a karakterek milyen eloszlásban szerepelnek, nem kell vizsgálni). A dátum akkor megfelelõ, ha éééé/hh/nn alakú, ahol é az év számjegyeit, h a hónap számjegyeit, n pedig a nap számjegyeit reprezentálja. Az évnek 2017-nek kell lennie. Ne felejtsük el ellenõrizni, hogy az adott hónapok hány naposak a 2017-es évben (pl. február 28 napos). Annak eldöntésére, hogy a dátum megfelelõ, vezessük be a validDate metódust (l. késõbb). A nyeremény értékét tartalmazó paraméter akkor helyes, ha pozitív és a nyeremények maximális értékét nem haladja meg (legfeljebb a nyeremények maximális értékével lehet egyenlõ).

Segítség: a metódusban használható a Character osztály isLetter() metódusa.

Legyen a validDate nevû metódus rejtett, osztályszintû, amely eldönti, hogy a szöveges típusú paraméterként kapott dátum megfelelõ-e vagy sem.

Definiáljunk az osztályban egy paraméter nélküli getPrice nevû metódust, amely visszaadja a nyeremény értékét.

Az osztály tartalmazzon egy betterHit nevû metódust, amely eldönti, hogy az aktuális úticél mint nyeremény értéke magasabb-e a paraméterben kapott úticél értékénél.

Definiáljunk egy paraméter nélküli toString nevû metódust is, amely visszaadja az objektum szöveges reprezentációját. A formátum legyen a következõ: városnév dátum (a nyeremény értéke EUR), ahol a dátumot éééé/hh/nn alakban adjuk meg. Pl. New York 2017/12/31 (7500 EUR).

Tesztelõ: tests.Part1

2. rész (7 + 2 pont)
raffle.Raffle osztály:

Az osztály a tombolát reprezentálja.

Az osztály egy rejtett tömbös lista (java.util.ArrayList) típusú adattagban tartsa nyilván, hogy milyen úticélokat lehet nyerni (Destination típusú objektumok).

Az osztálynak legyen egy publikus konstruktora, amely egy fájlnevet kap paraméterként. A fájl úticélokat tartalmaz. A metódus dolgozza fel a fájlt, szûrje ki belõle a hibás adatokat, majd tárolja el az úticélokat a listában. Ha a fájl nem létezik, vagy nem olvasható, akkor az úticélok listája legyen üres, a konstruktor pedig ne engedje ki a keletkezõ kivételt. Az inputfájl minden sora egy uticélt tartalmaz városnév@dátum,nyeremény értéke formában, ahol a dátumot éééé/hh/nn alakban adjuk meg. Ha a sor nem ilyen szerkezetû, vagy a nyeremény értéke nem konvertálható számmá, vagy a megadott adatokból a Destination típusú objektum nem hozható létre, akkor a sort figyelmen kívül kell hagyni és a feldolgozást a következõ sorral kell folytatni.

Segítség: Az, hogy egy szöveg egy egész számot tartalmaz, ellenõrizhetõ úgy, hogy elkapjuk az Integer.parseInt() által számmá történõ konvertáláskor dobott java.lang.NumberFormatException kivételt.

Definiáljunk egy numberOfDestinations nevû metódust, amely visszaadja a tombolajáték során megnyerhetõ úticélok számát.

Definiáljunk egy paraméter nélküli toString nevû metódust is, amely visszaadja a tombolajáték szöveges reprezentációját (a még megnyerhetõ úticélokat). A szöveg összeállításakor az úticélok olyan sorrendben szerepeljenek, amilyen sorrendben a konstruktor beolvasta, és olyan formában, ahogyan a Destination toString nevû metódusa elõállítja õket. Figyeljünk arra, hogy az utolsó úticél után már ne legyen sortörés!

Tesztelõ: tests.Part2

3. rész (6 + 1 pont)
A raffle.Raffle osztályban definiáljuk az alábbi publikus metódusokat:

insertionSort: a metódus a megnyerhetõ úticélok listáját beszúró rendezéssel a nyeremények értéke szerint csökkenõ sorrendbe rendezi. Tehát a lista elején az az úticél áll, amelynek mint nyereménynek az értéke a legnagyobb, a végén pedig az, amelynek a legkisebb.

Segítség: A beszúró rendezés a következõképpen mûködik: feltesszük, hogy az egy elembõl álló lista eleve rendezett. Minden menetben, minden egyes elemére a listának az 1-es indexûtõl kezdve, egészen a lista legutolsó eleméig, ellenõrizzük, hogy az aktuális elem hogyan viszonyul a már rendezett részlistában lévõ elemekhez. Az aktuális elemnél kisebb elemeket jobbra toljuk. Ha egy nagyobb elem következik, vagy pedig a lista végére érünk, az adott elemet beszúrhatjuk.

weightedAverage: a metódus az úticélok árainak súlyozott átlagát számolja ki, egy valós számot ad vissza eredményként. A súlyozott ár kiszámítása a következõképpen történjen (ha vannak megnyerhetõ úticélok): egy úticél értékét megszorozzuk a konstans 0.25 súllyal, majd ezen szorzatokat összeadjuk. Az így kapott összeget elosztjuk az úticélok számának és a konstans 0.25 súly szorzatával. Ha nincsenek úticélok, akkor a metódus -1-1-et adjon vissza.

Tesztelõ: tests.Part3

4. rész (6 + 1 pont)
A raffle.Raffle osztályban definiáljuk az alábbi publikus metódusokat:

raffle: a metódusnak nincsen paramétere és egy tombolahúzást szimulál. A játékos véletlenszerûen húz egyet a még megnyerhetõ úticélok közül. A húzás elõtt elõször a korábban megírt beszúró rendezéssel rendezzük az úticélokat, a húzást csak ezután hajtsuk végre. A kihúzott úticélt el kell távolítani a listából, ez lesz a metódus visszatérési értéke. Ha a tombolahúzás megkezdésekor egyetlen megnyerhetõ úticélunk sincs, akkor a metódus null-t adjon vissza.

Segítség: használható a java.util.Random osztály véletlen adat generálására.

simulate: a metódusnak nincs paramétere és a tombolajátékot szimulálja. A tombolajáték addig tart, amíg van megnyerhetõ úticél. A metódus az úticélokat egy tömbös listába gyûjtse össze, olyan sorrendben, ahogyan az úticélokat kihúzták. Ez a lista lesz a metódus visszatérési értéke.

Tesztelõ: tests.Part4

Pontozás (elmélet + gyakorlat)
0 -- 20: elégtelen (1)
21 -- 25: elégséges (2)
26 -- 30: közepes (3)
31 -- 35: jó (4)
36 -- 40: jeles (5)