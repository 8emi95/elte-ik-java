A feladat összefoglaló leírása
Ebben a feladatban egy órarendkészítõ programot és annak részeit fogjuk elkészíteni. Az órarend készítése során óráknak fogunk megfelelõ típusú és méretû üres termet keresni.

A részfeladatok megoldása során ügyeljünk arra, hogy a megadottakon kívül egyetlen osztály se tartalmazzon más publikus metódust vagy adattagot, illetve egyik csomag se tartalmazzon más osztályokat! A megoldást egyetlen .zip állományként kell feltölteni, amely tartalmazza a csomagnak megfelelõ könyvtárszerkezetben az összes forráskódot. A fordítás során keletkezõ .class állományokat viszont már nem szabad mellékelni! A fordításhoz legalább a Java Standard Edition 8 használata kötelezõ.

A feladathoz tartozik egy letölthetõ segédlet, ahol megtaláljuk a feladat leírásában hivatkozott összes állományt.

Tesztelés
Az egyes részfeladatokhoz tartoznak külön tesztesetek, amelyeket a feladatok végén jelöltük meg. Ezek önállóan is fordítható és futtatható .java állományok a mellékelt .jar segítségével. Például Windows alatt az elsõ feladathoz tartozó tesztesetek így fordíthatóak és futtathatóak:

> javac -cp .;tests-TimeTable.jar tests/DayTest.java
> java -cp .;tests-TimeTable.jar tests/DayTest
Ugyanezeket a teszteseteket használja a komplett feladathoz tartozó tesztelést végzõ Test osztály is. Ezt Windows alatt így lehet futtatni:

> java -cp .;tests-TimeTable.jar Test
Linux alatt mindent ugyanúgy lehet fordítani és futtatni, csak a -cp paraméterében a pontosvesszõt kell kettõspontra cserélni.

A feladat részletes ismertetése
interval.time.Day
Hozzuk létre az interval.time csomagban a Day felsorolási típust, amely egy napot reprezentál. Mivel a tanórák csak hétköznap lehetnek, így a felsorolási típusban csak a következõ elemek szerepeljenek: MONDAY, TUESDAY, WEDNESDAY, THURSDAY és FRIDAY.

A Day tartalmazzon egy nyilvános, String visszatérési értékû, paraméter nélküli toString() metódust, amely az adott naphoz visszaadja a nap magyar megfelelõjét, ékezetek nélkül (például "hetfo").
Tesztesetek: tests/DayTest.java

interval.time.Time
Ez az osztály a tanórákhoz tartozó idõpontot reprezentálja.

Hozzuk létre az interval.time csomagban a Time osztályt, amelynek legyenek a következõ elemei:

Két rejtett adattag, ami az órát és a percet tárolja.

Egy rejtett konstruktor, amelynek két int paramétere van: az óra és a perc. Az itt átadott értékeket ellenõrzés nélkül tároljuk el az objektumban.

Egy nyilvános, osztályszintû make() metódus, amely szintén az órát és a percet kapja meg paraméterül. A metódus feladata, hogy ellenõrizze, hogy a kapott idõpont szabályos-e: az idõpont nem lehet korábban, mint 8:00 és nem lehet késõbbi, mint 18:00 (és a perc természetesen csak 0 és 59 között lehet). Ha az idõpont megfelelõ, akkor a rejtett konstruktor segítségével hozzunk létre a Time objektumot és a referenciáját adjuk eredményül. Amennyiben ezek a kitételek nem teljesülnek, ne hozzunk létre új objektumot, hanem adjunk vissza egy üres, null referenciát!

Egy toString() metódus, amely legyen az Object-beli toString() felüldefiniálása. A metódus az idõpontot óra:perc formátumban adja vissza, ahol a perc mindig legyen kétkarakteres (10-nél kisebb szám kapjon egy vezetõ 0-t). Például 9:05 vagy 14:30.

Egy publikus add() metódus, amelynek egy Time objektumot ad vissza és egy int paramétere van: egy idõtartam percben kifejezve. Az idõtartam csak nemnegatív lehet, ezért, ha a metódus negatív számot kap paraméterül, akkor azonnal adjon vissza null-t. Ha a paraméter nemnegatív, akkor a metódus számolja ki, hogy milyen idõpont lenne, ha az objektum által tárolt idõpontot eltolnánk a paraméterben kapott perccel. Amennyiben ez az eltolt idõpont megfelel a make() metódusban részletezett kikötéseknek, akkor a metódus hozza létre és adja vissza az új idõpontot. Ha az eltolt idõpont nem megfelelõ, akkor a metódus adjon vissza null-t. A metódus semelyik esetben se változtassa meg az objektum aktuális állapotát! Például ha 09:05-höz hozzáadunk 90 percet az eredmény 10:35.

Az osztály definiálja felül az Object-beli hashCode() és equals() metódusokat, és valósítsa meg a Comparable<Time> interfészt.

Tesztesetek: tests/TimeTest.java

interval.Interval
Ez az osztály a tanórákhoz tartozó idõintervallumot reprezentálja.

Hozzuk létre az interval csomagban az Interval osztályt, amelynek legyenek a következõ elemei:

Megfelelõ (rejtett) adattagok, amelyek képesek tárolni, hogy mikor van a tanóra.

Egy rejtett konstruktor, amely megkapja a tanóra napját (Day típusú), a kezdés idõpontját (Time típusú) és az óra hosszát percben kifejezve (egész szám). Az itt átadott értékeket ellenõrzés nélkül tároljuk el az objektumban.

Egy nyilvános, osztályszintû make() metódus, amelynek paraméterül várja a napot (Day típusú), az órát, a percet és az óra hosszát, melyek int típusúak. A metódus feladata, hogy ellenõrizze, hogy a kapott paraméterek megfelelõek-e: mind az óra kezdetének, mind az óra végének meg kell felelnie a Time osztály make() metódusában leírt kikötéseknek és az óra hossza legalább 30 perc, de legfeljebb 180 perc lehet. Ha minden paraméter megfelelõ, akkor a rejtett konstruktor segítségével hozzunk létre az Interval objektumot és a referenciáját adjuk eredményül. Amennyiben ezek a kitételek nem teljesülnek, ne hozzunk létre új objektumot, hanem adjunk vissza egy üres, null referenciát!

Legyen négy nyilvános "getter" metódus: getDay(), getStartTime(), getEndTime() és getLength(), amelyek adják vissza a napot (Day típusú), a kezdõ és a befejezõ idõpontot (mindkettõ Time típusú) és az óra hosszát percben kifejezve (int típusú érték).

Egy toString() metódus, amely legyen az Object-beli toString() felüldefiniálása. A metódus az idõpontot nap kezdõ-idõpont - befejezõ-idõpont formátumban adja vissza, ahol nap, a kezdõ és a befejezõ idõpont olyan formátumban szerepel, ahogy a Day és Time osztály toString() metódusa elõállítja. Például "hetfo 8:15 - 8:45".

Az osztály definiálja felül az Object-beli hashCode() és equals() metódusokat, és valósítsa meg a Comparable<Interval> interfészt. Egy Interval objektum akkor tekinthetõ kisebbnek egy másiknál, ha vagy korábbi napon van, vagy egyezõ nap esetén korábban kezdõdik; ha pedig mind a nap, mint a kezdõ idõpont megegyezik, akkor az óra hossza dönt (rövidebb intervallum a kisebb).

Egy nyilvános, logikai visszatérési értékû endsBefore() metódus, amely paraméterül egy másik Interval objektumot kap. A metódus akkor adjon vissza igazat, ha az aktuális intervallum legkésõbb a paraméterben kapott intervallum kezdetéig befejezõdik (az egyezõség még elfogadott).

Egy nyilvános, logikai visszatérési értékû overlapsWith() metódus, amely paraméterül egy másik Interval objektumot kap. A metódus akkor ad vissza igazat, ha a két idõpont ütközik, azaz van átfedés közöttük (de az még elfogadható, ha az egyik pont akkor ér véget, amikor a másik kezdõdik és fordítva - tehát ezekben az esetekben nincs átfedés a két idõpont között).

Tesztesetek: tests/IntervalTest.java

classroom.ClassRoom
Hozzuk létre az classroom csomagban az ClassRoom absztrakt osztályt, amely egy tantermet reprezentál. Az osztálynak legyenek a következõ elemei:

Három protected láthatóságú adattag:

egy szöveges típusú, ami a tanterem nevét tárolja

egy egész típusú adattag, amely azt tárolja, hogy hány szék van a teremben

és egy TreeMap<Interval, String> típusú adattag, amely a tanterem beosztását tárolja (milyen idõintervallumra és milyen nevû órához foglalták le)

Egy nyilvános konstruktor, amely megkapja a tanterem nevét és a székek számát. A konstruktor tárolja el az adatokat. Kezdetben a teremre még nincsenek foglalások.

Egy nyilvános getName() nevû metódus, amely visszaadja a terem nevét.

Egy nyilvános, numberOfSpots() nevû, int visszatérési értékû absztrakt metódus, amely azt fogja megadni, hogy hány hallgató befogadására alkalmas a terem.

Egy nyilvános, hasComputers() nevû, boolean visszatérési értékû absztrakt metódus, amely azt fogja megadni, hogy vannak-e számítógépek a teremben.

Egy nyilvános, logikai visszatérési értékû book() metódus, amellyel le lehet foglalni a termet egy adott óra számára. A metódus paraméterben kapja meg, hogy milyen idõintervallumra és milyen nevû óra számára szeretnénk foglalni. Ha az intervallum semmilyen korábbi foglalással nem ütközik, akkor a metódus tárolja el a kérést és adjon vissza igazat. Ha az intervallum valamilyen korábbi foglalással ütközik, akkor ne tároljon el semmit, és adjon vissza hamisat.

Egy nyilvános, szöveges visszatérési értékû toString() metódus, amely a következõ formátumban adja vissza a foglalásokat: a foglalásokat szögletes zárójelben kell felsorolni, minden elem közé egy vesszõt és egy szóközt szúrva (az utolsó után természetesen nem), ahol egy foglalás a következõképpen néz ki: intervallum (óranév), ahol az intervallumot olyan formában jelenítsük meg, ahogy az Interval osztály toString() metódusa elõállítja. Például: "[hetfo 8:15 - 8:45 (java gyakorlat), kedd 10:00 - 11:30 (forditoprogramok gyakorlat)]"

Tesztesetek: tests/ClassRoomTest.java

classroom.ComputerLab
Hozzuk létre az classroom csomagban a ComputerLab osztályt, amely legyen a ClassRoom leszármazottja. Az osztály egy géptermet reprezentál. Az osztálynak legyenek a következõ elemei:

Egy nyilvános konstruktor, amely megkapja a tanterem nevét, a székek számát és a számítógépek számát. A konstruktor tárolja el az adatokat.

Az osztály valósítsa meg a numberOfSpots() metódust, amely megadja, hogy hány hallgató befogadására alkalmas a terem. Mivel több hallgató saját laptopot használ, így a számítógépek számát túl lehet lépni 10%-kal (lefelé kerekítve), de több hallgatót nem lehet beengedni, mint ahány szék van. Tehát például 20 gép és 25 szék esetén a terem 22 fõ számára alkalmas, míg 20 gép és 21 szék esetén csak 21 hallgató számára.

Az osztály valósítsa meg a hasComputers() metódust, amely igazat ad vissza.

Definiáljuk felül az õsosztály toString() metódusát. Az összeállított szöveg kezdõdjön a "gepterem" szöveggel, majd ezt kövesse szóközzel elválasztva a terem neve kerek zárójelben, majd ezt kövesse szintén szóközzel elválasztva a foglalások listája (a ClassRoom osztályban részletezett formátumban). Például: "gepterem (pc-9) [hetfo 8:15 - 8:45 (java gyakorlat), kedd 10:00 - 11:30 (forditoprogramok gyakorlat)]"

Tesztesetek: tests/ComputerLabTest.java

classroom.LectureRoom
Hozzuk létre az classroom csomagban a LectureRoom osztályt, amely legyen a ClassRoom leszármazottja. Az osztály egy elõadótermet reprezentál. Az osztálynak legyenek a következõ elemei:

Egy nyilvános konstruktor, amely megkapja a tanterem nevét és a székek számát. A konstruktor tárolja el az adatokat.

Az osztály valósítsa meg a numberOfSpots() metódust, amely megadja, hogy hány hallgató befogadására alkalmas a terem. Mivel az elõadások nyilvánosak, így azért, hogy helyet hagyjunk "külsõs" érdeklõdõknek is, hallgatókkal csak a terem 90%-át lehet feltölteni (lefelé kerekítve).

Az osztály valósítsa meg a hasComputers() metódust, amely hamisat ad vissza.

Definiáljuk felül az õsosztály toString() metódusát. Az összeállított szöveg kezdõdjön a "eloadoterem" szöveggel, majd ezt kövesse szóközzel elválasztva a terem neve kerek zárójelben, majd ezt kövesse szintén szóközzel elválasztva a foglalások listája (a ClassRoom osztályban részletezett formátumban).

Tesztesetek: tests/LectureRoomTest.java

classroom.SeminarRoom
Hozzuk létre az classroom csomagban a SeminarRoom osztályt, amely legyen a ClassRoom leszármazottja. Az osztály egy gyakorlati termet reprezentál. Az osztálynak legyenek a következõ elemei:

Egy nyilvános konstruktor, amely megkapja a tanterem nevét és a székek számát. A konstruktor tárolja el az adatokat.

Az osztály valósítsa meg a numberOfSpots() metódust, amely megadja, hogy hány hallgató befogadására alkalmas a terem. Ez a szám pontosan a székek számával azonos.

Az osztály valósítsa meg a hasComputers() metódust, amely hamisat ad vissza.

Definiáljuk felül az õsosztály toString() metódusát. Az összeállított szöveg kezdõdjön a "gyakorlati terem" szöveggel, majd ezt kövesse szóközzel elválasztva a terem neve kerek zárójelben, majd ezt kövesse szintén szóközzel elválasztva a foglalások listája (a ClassRoom osztályban részletezett formátumban).

Tesztesetek: tests/SeminarRoomTest.java

timetable.BookingException
Hozzuk létre az timetable csomagban a BookingException osztályt, amely a foglalás során keletkezõ kivételt reprezentálja. Az osztály legyen az Exception leszármazottja. Az osztály tartalmazzon egy nyilvános konstruktort, amely paraméterben megkapja a hibaüzenetet. A konstruktor a hibaüzenettel hívja meg a szülõ osztályának konstruktorát.

timetable.TimeTable
Hozzuk létre az timetable csomagban a TimeTable osztályt, amely egy órarendet reprezentál.

Legyen egy rejtett ArrayList<ClassRoom> típusú adattag, amely a termeket tárolja.

Legyen egy nyilvános, void visszatérési értékû add() metódus, amely paraméterül egy ClassRoom típusú objektumot kap. A metódus ellenõrizze, hogy ilyen nevû terem szerepel-e már a tárolt listájában, és amennyiben igen, úgy dobjon egy IllegalArgumentException típusú kivételt, ahol a hiba szövege a következõ: "multiple names: a-hozzáadni-kívánt-terem-neve". Ha ilyen nevû terem még nem szerepelt a listában, akkor a metódus tárolja el a termet.

Egy rejtett, osztályszintû, logikai visszatérési értékû, accept() nevû metódus, amely paraméterül megkapja, hogy melyik teremben szeretnénk foglalást végezni (ClassRoom típusú objektum), hogy hány fõ számára szeretnénk foglalni (egész szám), és hogy szükség van-e számítógépekre (logikai érték). A metódusnak el kell döntenie, hogy az adott terem megfelelõ-e: befér-e a kívánt számú hallgató. Ha szükség van számítógépre az órához, akkor van-e számítógép a teremben, de ha nincs szükség számítógépekre, akkor ne legyen a teremben sem (ne foglaljunk fölöslegesen géptermeket, mert kevés van belõlük).

Egy nyilvános void visszatérési értékû book() metódus, amely segítségével idõpontot foglalhatunk egy óra számára. A metódus paraméterei a következõk: az óra neve, mikor van az óra (Interval típusú objektum), hány fõ számára foglalunk, és hogy szükség van-e számítógépekre (logikai érték). A metódus végignézi a termeket, és amelyik típus és létszám szerint elfogadható, abban megpróbálja lefoglalni az adott idõpontot az adott nevû óra számára. Ha valamelyik teremben sikeres a foglalás, akkor a metódus befejezi a munkáját. Ha semelyik terem nem volt megfelelõ, akkor a metódus BookingException kivételt dob. Ha voltak olyan termek, melyek méret és típus szerint megfelelõk voltak, de egyikben sem volt szabad az adott idõpont, akkor a hibaüzenet (amit a kivétel konstruktorának átadunk) legyen There is no room of the specified type available in the given interval. Ha egyáltalán nem is volt olyan terem, mely méret és típus szerint jó lett volna, akkor pedig a hibaüzenet legyen No room available in the given interval.

Egy nyilvános, szöveges visszatérés értékû, paraméter nélküli toString() metódus, amely visszaadja az órarend szöveges reprezentációját. A formátum legyen a következõ: az adott termek szöveges reprezentációja sortörésekkel elválasztva (az utolsó után is legyen).

Tesztesetek: tests/TimeTableTest.java

Jó munkát!