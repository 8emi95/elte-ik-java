A csoport
Általános tudnivalók
Ebben az ismertetésben az osztályok, valamint a minimálisan szükséges metódusok leírásai fognak szerepelni. A feladatmegoldás során fontos betartani az elnevezésekre és a típusokra vonatkozó megszorításokat, illetve a szövegek formázási szabályait. Segédfüggvények is létrehozhatók, a feladatban nem megkötött adattagok és elnevezéseik is a feladat megoldójára vannak bízva. Törekedjünk arra, hogy az osztályok belsõ reprezentációját a lehetõ legjobban védjük, tehát csak akkor engedjünk meg, és csak olyan hozzáférést, amelyre a feladat felszólít, vagy amit az osztályt használó kódrészlet megkíván!

A beadott megoldásnak mûködnie kell a mellékelt tesztprogrammal, de ez nem elégséges feltétele az elfogadásnak. Törekedjünk arra, hogy a megírt forráskód kellõen általános és újrafelhasználható legyen!

Használható segédanyagok: Java dokumentáció, legfeljebb egy üres lap és toll. Ha bármilyen kérdés, észrevétel felmerül, azt a felügyelõknek kell jelezni, NEM a diáktársaknak!

Figyelem! Az a metódus, amely fordítási hibát tartalmaz, automatikusan nulla pontot ér!

Tesztelés
Az egyes részfeladatokhoz tartoznak külön tesztesetek, amelyeket a feladatok végén jelöltük meg. Ezek önállóan is fordítható és futtatható .java állományok a mellékelt .jar segítségével. Például Windows alatt az elsõ feladathoz tartozó tesztesetek így fordíthatóak és futtathatóak:

> javac -cp .;Rental-tests.jar tests/Part1.java
> java -cp .;Rental-tests.jar tests/Part1
Ugyanezeket a teszteseteket használja a komplett feladathoz tartozó tesztelést végzõ Test osztály is. Ezt Windows alatt így lehet futtatni:

> java -cp .;Rental-tests.jar Test
Linux alatt mindent ugyanúgy lehet fordítani és futtatni, csak a -cp paraméterében a pontosvesszõt kell kettõspontra cserélni.

A feladat összefoglaló leírása
A feladatban egy autókölcsönzõ leegyszerûsített mûködését fogjuk szimulálni.

A programhoz tartozik egységtesztelõ, amely az egyes osztályok funkcionalitását teszteli.

A feladat részletes ismertetése
1. rész (6 + 1 pont)
rental.Car osztály:

Az osztály egy autót reprezentál.

Az osztálynak három rejtett adattagja van: egy szöveges típusú brand, amely az autó márkáját, egy szöveges típusú licensePlate, amely az autó rendszámát és egy valós (double) típusú price, amely az autó kölcsönzési díját tárolja.

Az osztálynak legyen egy rejtett konstruktora, amely paraméterként megkapja a márkát, a rendszámtáblát és a kölcsönzési díjat, és beállítja a megfelelõ adattagokat.

Az osztály rendelkezik továbbá két rejtett, konstans, osztályszintû adattaggal is. A valós típusú MAX_PRICE az autók maximális kölcsönzési díját tárolja, értéke 500.0. A Car típusú CAR_OF_THE_YEAR az év autóját tárolja, a márkája Alfa Romeo, a rendszáma ABC 123, a kölcsönzési díja pedig megegyezik a maximális kölcsönzési díjjal.

Definiáljunk egy osztályszintû make nevû metódust is. A make metódus szintén a márkát, a rendszámtáblát és a kölcsönzési díjat kapja meg paraméterként. A metódus elõször ellenõrzi, hogy a paraméterek megfelelõek. Amennyiben igen, akkor létrehozza és visszaadja a paramétereknek megfelelõ Car típusú objektumot. Ha a paraméterek nem megfelelõek, akkor a metódus null-t adjon vissza. A márkát tartalmazó paraméter akkor megfelelõ, ha csak betûkbõl vagy szóközbõl áll és legalább 2 karakter hosszú (azt, hogy ezek a karakterek milyen eloszlásban szerepelnek, nem kell vizsgálni). A rendszámtábla akkor megfelelõ, ha pontosan 7 karakter hosszú: 3 nagybetûbõl és 3 számjegybõl áll, amelyeket egy szóköz választ el egymástól (annak eldöntésére, hogy a rendszámtábla megfelelõ, vezessük be a validLicensePlate nevû metódust, l. késõbb). A kölcsönzési díjat tartalmazó paraméter akkor helyes, ha pozitív és a maximális kölcsönzési díjat nem haladja meg (legfeljebb a maximális kölcsönzési díjjal lehet egyenlõ).

Segítség: a metódusban használható a Character osztály isLetter() metódusa.

Legyen a validLicensePlate nevû metódus rejtett, osztályszintû, amely eldönti, hogy a szöveges típusú paraméterként kapott rendszámtábla megfelelõ-e vagy sem.

Segítség: a metódusban használható a Character osztály isUpperCase() és isDigit() metódusa.

Definiáljunk az osztályban egy paraméter nélküli getPrice nevû metódust, amely visszaadja az autó kölcsönzési díját.

Az osztálynak van egy decreasePrice nevû metódusa, amely az aktuális autó kölcsönzési díját 10-zel csökkenti, ha az eredeti kölcsönzési díj 10-nél nagyobb, feltéve, hogy nem egyezik meg a maximális kölcsönzési díjjal.

Az osztály tartalmazzon egy cheaperThan nevû metódust, amely eldönti, hogy az aktuális autó kölcsönzési díja alacsonyabb-e a paraméterben kapott autó kölcsönzési díjánál.

Definiáljunk egy paraméter nélküli toString nevû metódust is, amely visszaadja az objektum szöveges reprezentációját. A formátum legyen a következõ: márka (rendszámtábla) ár EUR, ahol az árat egy tizedesjegy pontossággal jelenítse meg és az egyes helyiértékek egymás alá kerüljenek. Pl. Volvo (JSD 856) 500,0 EUR, BMW (ABC 123) 40,0 EUR, Alfa Romeo (DEF 234) 9,0 EUR.

Tesztelõ: tests.Part1

2. rész (7 + 2 pont)
rental.CarRental osztály:

Az osztály egy egyszerûsített autókölcsönzõt reprezentál.

Az osztály egy rejtett tömbös lista (java.util.ArrayList) típusú adattagban tartsa nyilván, hogy milyen autókat lehet kölcsönözni (Car típusú objektumok).

Az osztálynak legyen egy publikus konstruktora, amely egy fájlnevet kap paraméterként. A fájl autókat tartalmaz. A metódus dolgozza fel a fájlt, szûrje ki belõle a hibás adatokat, majd tárolja el az autókat a listában. Ha a fájl nem létezik, vagy nem olvasható, akkor az autók listája legyen üres, a konstruktor pedig ne engedje ki a keletkezõ kivételt. Az inputfájl minden sora egy autót tartalmaz márka:rendszám,kölcsönzési díj formában. Ha a sor nem ilyen szerkezetû, vagy a kölcsönzési díj nem konvertálható számmá, vagy a megadott adatokból a Car objektum nem hozható létre, akkor a sort figyelmen kívül kell hagyni és a feldolgozást a következõ sorral kell folytatni.

Segítség: Az, hogy egy szöveg egy valós számot tartalmaz, ellenõrizhetõ úgy, hogy elkapjuk a Double.parseDouble() által számmá történõ konvertáláskor dobott java.lang.NumberFormatException kivételt.

Definiáljunk egy numberOfCars nevû metódust, amely visszaadja a kölcsönzõbõl kölcsönözhetõ autók számát.

Definiáljunk egy paraméter nélküli toString nevû metódust is, amely visszaadja az autókölcsönzõ szöveges reprezentációját (a még kölcsönözhetõ autókat). A szöveg összeállításakor az autók olyan sorrendben szerepeljenek, amilyen sorrendben a konstruktor beolvasta, és olyan formában, ahogyan a Car toString nevû metódusa elõállítja õket. Figyeljünk arra, hogy az utolsó autó után már ne legyen sortörés!

Tesztelõ: tests.Part2

3. rész (6 + 1 pont)
A rental.CarRental osztályban definiáljuk az alábbi publikus metódusokat:

insertionSort: a metódus a kölcsönözhetõ autók listáját beszúró rendezéssel a kölcsönzési díjuk szerint növekvõ sorrendbe rendezi. Tehát a lista elején az az autó áll, amelynek a kölcsönzési díja a legkisebb, a végén pedig az, amelynek a legnagyobb.

Segítség: A beszúró rendezés a következõképpen mûködik: feltesszük, hogy az egy elembõl álló lista eleve rendezett. Minden menetben, minden egyes elemére a listának az 1-es indexûtõl kezdve, egészen a lista legutolsó eleméig, ellenõrizzük, hogy az aktuális elem hogyan viszonyul a már rendezett részlistában lévõ elemekhez. Az aktuális elemnél nagyobb elemeket jobbra toljuk. Ha egy kisebb elem következik, vagy pedig a lista végére érünk, az adott elemet beszúrhatjuk.

weightedAverage: a metódus az autók árainak súlyozott átlagát számolja ki, egy valós számot ad vissza eredményként. A súlyozott ár kiszámítása a következõképpen történjen (ha vannak autók): egy autó árát szorozzuk azzal a számmal (súllyal), ahányadik az autó a listában (pl. a 0-dik indexû autó súlya 1 lesz), majd ezen szorzatokat összeadjuk. Az így kapott összeget elosztjuk a súlyok összegével. Ha nincsenek autók, akkor a metódus -1-et adjon vissza.

Tesztelõ: tests.Part3

4. rész (6 + 1 pont)
A rental.CarRental osztályban definiáljuk az alábbi publikus metódusokat:

rentCheapest: a metódusnak nincsen paramétere és egy autó kölcsönzését szimulálja. Az ügyfél mindig a legalacsonyabb árú autót kölcsönzi. A megvalósításhoz használjuk a korábban megírt beszúró rendezést, amely az autókat kölcsönzési díjuk szerint növekvõ sorrendbe rendezi. A kölcsönözni kívánt autót el kell távolítani a listából, ez lesz a metódus visszatérési értéke. Ha a kölcsönzés elején egyetlen autó sincs a kölcsönzõben, akkor a metódus null-t adjon vissza.

sale: a metódusnak nincs paramétere és az autók kölcsönzési díjának véletlenszerû csökkentését szimulálja (a kölcsönzési díjat véletlenszerûen vagy csökkentjük, vagy nem csökkentjük). Az aktualizált kölcsönzési díjú autókat egy listába gyûjtsük össze, ez lesz a metódus visszatérési értéke.

Segítség: használható a java.util.Random osztály véletlen adat generálására.

simulate: a metódusnak nincs paramétere és a kölcsönzést szimulálja (az összes autó kölcsönzését az autókölcsönzõ mûködése során). A kölcsönzés megkezdése elõtt az autók kölcsönzési díját aktualizáljuk (l. a sale metódust). A kölcsönzés addig tart, amíg el nem fogy az összes kölcsönözhetõ autó. A metódus az autókat egy tömbös listába gyûjtse össze, olyan sorrendben, ahogy az autókat kölcsönözték. Ez a lista lesz a metódus visszatérési értéke.

Tesztelõ: tests.Part4

Pontozás (elmélet + gyakorlat)
0 -- 20: elégtelen (1)
21 -- 25: elégséges (2)
26 -- 30: közepes (3)
31 -- 35: jó (4)
36 -- 40: jeles (5)